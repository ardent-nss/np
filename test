#!/bin/bash

noformat=0 # Just for compatibility
scriptversion=0.0.1.0

rm -rfv dbg/* # Debugging stuff
#mkdir -p dbg

nprint() { # printf with optimized line wrapping
  printf "nprint: init"
  cols=$(tput cols)

  lines=()
  while IFS= read -r line; do # Read each line into a separate variable
    lines+=("$line")
  done <<< $(printf "$@") # printf %<blah blah> replacement is done before feeding the output to the array.

  for ((i = 0; i < ${#lines[@]}; i++)); do # We will be wrapping each input line separately
    if [[ i -eq 0 ]]; then
      printf "\r\e[0Knprint: line $i"
    fi

    currentline=$(printf "${lines[i]}" | sed $'s/\033\[[0-9;]*m//g')
    currentlinelength=${#currentline}
    currentlineformatted=$(printf "${lines[i]}")
    currentlineformattedlength=${#currentlineformatted}

    if [ "$currentlinelength" -le "$cols" ]; then
      printf "\r\e[0Knprint: writing line as-is"
      printf "\r\e[0K%b" "${lines[i]}\n"
    else
      printf "\r\e[0Knprint: wrapping $i"

      currentlineformatted_raw=$(printf "$currentlineformatted" | cat -v | sed 's/\^/\\033/g' | sed 's/\[\[/\[/g' | sed $'s/\033\[[0-9;]*m//g')
      echo "$currentlineformatted_raw" > dbg/currentlineformatted_raw

      matches=$(grep -b -o "[ /\\\-]" <<< "$currentline") # Find all split points
      printf "$currentline" > dbg/currentline
      echo $matches > dbg/matches

      allescapesequences=$(printf "$currentlineformatted" | grep -oP '\033\[[^\033]*[0-9]m' | cat -v | sed 's/\^/\\033/g' | sed 's/\[\[/\[/g' | sed 's/ //g') # Get all escape sequences in the line
      allescapesequences_raw=$(printf "$currentlineformatted" | grep -oP '\033\[[^\033]*[0-9]m' | cat -v | sed 's/\^/\\033/g' | sed 's/\[\[/\[/g' | sed $'s/\033\[[0-9;]*m//g')
      allescapesequencescount=$(($(printf "$allescapesequences" | awk '{print NF}' | wc -c) / 2)) # Get the total number of escape sequences in the whole line
      printf "\r\e[0Knprint: total number of escape sequences $numescapesequences"
      allescapechars=$((${#allescapesequences}-($allescapesequencescount-1)))
      printf "\r\e[0Knprint: total number of escape chars $allescapechars"

      printf "$allescapesequencescount" > dbg/allescapesequencescount
      printf "$allescapesequences" > dbg/allescapesequences
      printf "$allescapesequences_raw" > dbg/allescapesequences_raw
      printf "$allescapechars" > dbg/allescapechars
      printf "$currentlineformatted" > dbg/currentlineformatted
      printf "$currentlineformattedlength" > dbg/currentlineformattedcount

      splitpoints=()
      splitpoints_numbers=()
      while IFS=':' read -r position _; do
        printf "\r\e[0Knprint: split point %d: %d" "$((index++))" "$position"
        splitpoints_numbers+=($index)
        if [[ $position -le $cols ]]; then
          printf "\r\e[0Knprint: viable split point %d" "$position"
          splitpoint=$position
          echo $splitpoint > dbg/splitpoint

          splitpoints+=($splitpoint) # Add the splitpoint to the array of splitpoints.
        else
          printf "\r\e[0Knprint: not finding unnecessary split points" # We don't need to find split points that are not viable. Possible pressure point for applications printing long lines.
          break
        fi
      done <<< "$matches"
      printf "\r\e[0Knprint: splitpoint: $splitpoint"
      printf "%s\n" "${splitpoints[@]}" > dbg/splitpoints

      start=0
      stop=$((splitpoint+allescapechars))
      echo $stop > dbg/stop
      currentlineformatted=$(printf "${lines[i]}" | cat -v | sed 's/\^/\\033/g' | sed 's/\[\[/\[/g' | sed $'s/\033\[[0-9;]*m//g')
      echo "$currentlineformatted" > dbg/currentlineformatted2
      firstlinetoprint=${currentlineformatted:start:stop}
      firstlinetoprint_noformat=$(printf "$firstlinetoprint" | sed $'s/\033\[[0-9;]*m//g')
      firstlinetoprint_noformat_count=${#firstlinetoprint_noformat}

      echo "$firstlinetoprint_noformat" > dbg/firstlinetoprint_noformat
      echo "$firstlinetoprint_noformat_count" > dbg/firstlinetoprint_noformat_count

      printf "\r\e[0K$firstlinetoprint\n"

      if [[ $firstlinetoprint_noformat_count -gt $(tput cols) ]]; then
        printf "\r\e[0Khouston we have a problem. wrapping from previous split point...\n"

        while [[ $thislinefits != 1 ]]; do
          t_iter=$((t_iter+1))

          stop=$((splitpoint+t_iter))
          firstlinetoprint=${currentlineformatted:start:stop}
          firstlinetoprint_noformat=$(printf "$firstlinetoprint" | sed $'s/\033\[[0-9;]*m//g')
          firstlinetoprint_noformat_count=${#firstlinetoprint_noformat}

          if [[ $firstlinetoprint_noformat_count -gt $(tput cols) ]]; then
            echo
          fi
        done
      else
        printf "\r\e[0K$firstlinetoprint\n"
      fi
    fi
    printf "nprint: done wrapping line $i"
    ilength=${#i}
    printf "\r\e[0K"
  done
  ilength=${#i}
  printf "\r\e[0K"
}

nprint "\033[1mnp ${scriptversion}\033[0m is a C/C++ build system. Our Git repository is located at \033[3m\033[38;2;145;203;255mhttps://github.com/HackerDaGreat57/np\033[0m.
To create a new project, just run \033[38;2;128;255;57mnp\033[0m inside a dedicated directory, and then edit \033[38;2;57;255;60m.np/project.json\033[0m to include details about your project.\n
\033[4mGeneral options:\033[0m
  %-51b  display this help page
  %-51b  display the version number of the script (${scriptversion})
  %-31b  do not use ANSI formatting in standard output (automatically disabled if not writing to tty)
  %-27b  display the documentation for \033[38;2;57;255;60mproject.json\033[0m (which is used to configure projects created with np) also note that there are a few \033[38;2;45;45;255mchanges\033[0m and there are some even more existential crisis and there is world hunger and the \033[2;38;34;34;34mworld\033[0m is about to and and i really need to get this line to about 321 characters not including the linux subshells and some other strange Rust-based \033[2;38;56;255;255mapplications\033[0m
  %-27b  create a new \033[38;2;241;255;71m~/.config/np/defaults.json\033[0m (overwrites if already existing)
  %70b  Specify a specific place to put the generated file by specifying PATH" "-h \033[38;2;225;225;225m|\033[0m --\033[4mh\033[0melp" "-v \033[38;2;225;225;225m|\033[0m --\033[4mv\033[0mersion" "-f \033[38;2;225;225;225m|\033[0m --no-\033[4mf\033[0mormatting" "-d \033[38;2;225;225;225m|\033[0m --\033[4md\033[0mocumentation" "-m | --\033[4mm\033[0make-defaults" "\033[38;2;125;125;125m└─\033[0m\033[38;2;225;225;225m[PATH]\033[0m"

# nprint "\033[1mnp ${scriptversion}\033[0m is a C/C++ build system. Our Git repository is located at \033[3m\033[38;2;145;203;255mhttps://github.com/HackerDaGreat57/np\033[0m.
# To create a new project, just run \033[38;2;128;255;57mnp\033[0m inside a dedicated directory, and then edit \033[38;2;57;255;60m.np/project.json\033[0m to include details about your project.\n
# \033[4mGeneral options:\033[0m
#   %-51b  display this help page
#   %-51b  display the version number of the script (${scriptversion})
#   %-31b  do not use ANSI formatting in standard output (automatically disabled if not writing to tty and if some things go wrong and the world ends)
#   %-27b  create a new \033[38;2;241;255;71m~/.config/np/defaults.json\033[0m (overwrites if already existing)
#   %70b  Specify a specific place to put the generated file by typing PATH" "-h \033[38;2;225;225;225m|\033[0m --\033[4mh\033[0melp" "-v \033[38;2;225;225;225m|\033[0m --\033[4mv\033[0mersion" "-f \033[38;2;225;225;225m|\033[0m --no-\033[4mf\033[0mormatting" "-m | --\033[4mm\033[0make-defaults" "\033[38;2;125;125;125m└─\033[0m\033[38;2;225;225;225m[PATH]\033[0m"

printf "
this is a line and "

#nprint "i hope that the debug messages will not cause the last part to disappear because that would be a shame and i would need to make a million tiktok videos about it!"