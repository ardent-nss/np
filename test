#!/bin/bash

noformat=0 # Just for compatibility
scriptversion=0.0.1.0

rm c m s f t q qt qq # Debugging stuff

nprint() { # printf with optimized line wrapping
  printf "nprint: init"

  lines=()
  while IFS= read -r line; do # Read each line into a separate variable
    lines+=("$line")
  done <<< $(printf "$@") # printf %<blah blah> replacement is done before feeding the output to the array.

  for ((i = 0; i < ${#lines[@]}; i++)); do # We will be wrapping each input line separately
    #if [ $i -gt $(((${#lines[@]}+1) / 2)) ]; then # This is a fix for a very strange bug that caused nprint to print stuff *twice*
    #  break
    #fi

    printf "\r\e[0Knprint: line $i"

    currentline=$(printf "%b" "${lines[i]}" | sed $'s/\033\[[0-9;]*m//g')
    currentlinelength=${#currentline}
    currentlineformatted=$(printf "%b" "${lines[i]}")
    currentlineformattedlength=${#currentlineformatted}

    if [ "$currentlinelength" -le "$(tput cols)" ]; then
      printf "\r\e[0Knprint: writing line as-is"
      printf "\r\e[0K%b" "${lines[i]}\n"
    else
      printf "\r\e[0Knprint: wrapping $i"

      matches=$(grep -b -o "[ /\\\-]" <<< "$currentline") # Find all split points
      echo $currentline > c
      echo $matches > m

      index=0
      while IFS=':' read -r position _; do
        printf "\r\e[0Knprint: split point %d: %d" "$((++index))" "$position"
        if [[ $position -le $(tput cols) ]]; then
          printf "\r\e[0Knprint: viable split point %d" "$position"
          splitpoint=$position
          echo $splitpoint > s
        else
          printf "\r\e[0Knprint: not finding unnecessary split points" # We don't need to find split points that are not viable. Possible pressure point for applications printing long lines.
          break
        fi
      done <<< "$matches"

      allescapesequences=$(printf "$currentlineformatted" | grep -oP '\033\[[^\033]*[0-9]m')
      #numescapechars=$((${#allescapesequences}-$(printf "$allescapesequences" | tr -cd '\x20\t' | wc -c))) > q
      numescapechars_subtract=$(($(printf "$allescapesequences" | tr -cd '\x20\t' | wc -c)-1)) # Get the total number of escape sequences in the file
      echo $numescapechars_subtract > qt
      echo $allescapesequences > q
      numescapechars=$((${#allescapesequences}-$numescapechars_subtract))
      echo $numescapechars > qq

      while IFS= read -r allescapesequences; do
        sequencelength=${#allescapesequences}
        totalsequenceslength=$((totalsequenceslength+sequencelength))
        printf "\r\e[0Knprint: new total length of all escape sequences in line: $totalsequencelength"
      done <<< "$allescapesequences"
      printf "\r\e[0K"

      wrappingdone=0
      #printf "$splitpoint\n"
      printf "\r\e[0Knprint: splitpoint: $splitpoint"

      start=1
      stop=$((splitpoint+totalsequenceslength))
      firstline=$(printf "${lines[i]}" | cut -c $start-$(($stop)))
      echo $firstline > f

      thisescapesequences=$(grep -o -P '\\033\[[^m]*m' <<< "$firstline")
      #echo $thisescapesequences > q

      while IFS= read -r thisescapesequences; do
        thissequencelength=${#thisescapesequences}
        thistotalsequenceslength=$((thistotalsequenceslength+thissequencelength))
        printf "\r\e[0Knprint: new total length of all escape sequences in this line: $totalthissequencelength"
      done <<< "$thisescapesequences"

      start=1
      stop=$((splitpoint+thistotalsequenceslength))
      echo $stop > t
      thisfirstline=$(printf "${lines[i]}" | cut -c $start-$(($stop)))

      printf "\r\e[0K$thisfirstline\n"

      # start=$((currentlinelength - splitpoint))
      # stop=$currentlinelength
      # printf "\r\e[0Knprint: cutting $start - $currentlinelength"
      # secondline=$(printf "$currentline" | cut -c $start-$(($stop))) # Cut the second line from the first
      # secondlinelength=${#secondline}
      # if [[ $secondlinelength -le $(tput cols) ]]; then
      #   printf "\r\e[0Knprint: second line is good"
      #   printf "\r\e[0K$secondline\n"
      # fi
    fi
    printf "\r\e[0K"
  done
}

nprint "\033[1mnp ${scriptversion}\033[0m is a C/C++ build system. Our Git repository is located at \033[3m\033[38;2;145;203;255mhttps://github.com/HackerDaGreat57/np\033[0m.
To create a new project, just run \033[38;2;128;255;57mnp\033[0m inside a dedicated directory, and then edit \033[38;2;57;255;60m.np/project.json\033[0m to include details about your project.\n
\033[4mGeneral options:\033[0m
  %-51b  display this help page
  %-51b  display the version number of the script (${scriptversion})
  %-31b  do not use ANSI formatting in standard output (automatically disabled if not writing to tty)
  %-27b  display the documentation for \033[38;2;57;255;60mproject.json\033[0m (which is used to configure projects created with np) also note that there are a few changes
  %-27b  create a new \033[38;2;241;255;71m~/.config/np/defaults.json\033[0m (overwrites if already existing)
  %70b  Specify a specific place to put the generated file by typing PATH" "-h \033[38;2;225;225;225m|\033[0m --\033[4mh\033[0melp" "-v \033[38;2;225;225;225m|\033[0m --\033[4mv\033[0mersion" "-f \033[38;2;225;225;225m|\033[0m --no-\033[4mf\033[0mormatting" "-d | --\033[4md\033[0mocumentation" "-m | --\033[4mm\033[0make-defaults" "\033[38;2;125;125;125m└─\033[0m\033[38;2;225;225;225m[PATH]\033[0m"